
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for an open work order
    function hasOpenWorkOrder(userId, serviceProviderId) {
      return exists(/databases/$(database)/documents/workOrders/$(userId)_$(serviceProviderId)) &&
             get(/databases/$(database)/documents/workOrders/$(userId)_$(serviceProviderId)).data.status != 'Completed';
    }

    // Users can only read and write their own data.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Rules for the equipment subcollection
      match /equipment/{equipmentId} {
        // A user can manage their own equipment
        // A service provider can update equipment if an open work order exists for that user
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && (
          request.auth.uid == userId ||
          (exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/workOrders).where("userId", "==", userId).where("serviceProviderId", "==", request.auth.uid).where("status", "!=", "Completed").get().size() > 0)
        );

        // Rules for the components subcollection within equipment
        match /components/{componentId} {
          // A user can manage their own components
          // A service provider can manage components if an open work order exists
          allow read: if request.auth != null && request.auth.uid == userId;
          allow write: if request.auth != null && (
            request.auth.uid == userId ||
            (exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/workOrders).where("userId", "==", userId).where("serviceProviderId", "==", request.auth.uid).where("status", "!=", "Completed").get().size() > 0)
          );
        }
      }
    }

    // Service providers can be read by anyone, but only written to by the owner.
    match /serviceProviders/{serviceProviderId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == serviceProviderId;
    }
    
    // Employees can only be managed by the shop owner
    match /employees/{employeeId} {
        allow read, write: if request.auth != null && request.resource.data.shopId == request.auth.uid;
    }

    // Work orders can be created by the user, and read/updated by the user or the assigned shop.
    match /workOrders/{workOrderId} {
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.serviceProviderId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Master components are read-only for authenticated users.
    match /masterComponents/{componentId} {
      allow read: if request.auth != null;
      allow write: if false; // Should only be written to by admin/backend processes
    }
  }
}
