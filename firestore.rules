
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is a registered service provider (shop)
    function isShop() {
      return exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid));
    }
    
    // Users can only read/write their own data.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // Shops can read and write equipment data for any user.
      // NOTE: This is permissive. In a production app, you would want to
      // verify a relationship between the shop and the user.
      match /equipment/{equipmentId} {
        allow read, write: if isShop();
        
        match /components/{componentId} {
           allow read, write: if isShop();
        }
      }
    }
    
    // Service providers (shops) can only read/write their own profile.
    match /serviceProviders/{shopId} {
        allow read, write: if isOwner(shopId);
    }
    
    // Shops can manage employees associated with their shopId.
    match /employees/{employeeId} {
        allow read, create, update, delete: if request.auth.uid == resource.data.shopId || request.auth.uid == request.resource.data.shopId;
    }
    
    // Shops can manage work orders associated with their serviceProviderId.
    match /workOrders/{workOrderId} {
      allow read, update: if isShop() && request.auth.uid == resource.data.serviceProviderId;
    }
    
    // Master components list should be readable by any authenticated user (shops)
    // but writable only by admins (a role we can define later).
    // For now, lock it down to read-only for authenticated users.
    match /masterComponents/{componentId} {
        allow read: if request.auth != null;
        allow write: if false; // Protect master data
    }
  }
}
