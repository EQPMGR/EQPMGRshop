rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default user access: users can read/write their own data.
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // This is the new rule that will allow a service provider to update a user's equipment
    // (e.g., for adding a maintenance log entry or replacing a component) ONLY IF there is an
    // open work order for that user with that provider.
    // It is more specific than the old rule and thus takes precedence for these paths.
    match /users/{userId}/equipment/{equipmentId}/{component=**} {
      allow write: if request.auth != null && 
                      exists(
                        /databases/$(database)/documents/workOrders/
                          .where("userId", "==", userId)
                          .where("serviceProviderId", "==", request.auth.uid)
                          .where("status", "!=", "Completed")
                      );
    }
    
    // Grant read and write access to equipment data only if the user ID matches the userId field in the equipment document.
    // This rule is likely for a different data model and we will leave it for compatibility.
    match /equipment/{equipmentId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Authenticated users can read the global data.
    match /bikeModels/{bikeId} {
      allow read: if request.auth != null;
    }
    match /serviceProviders/{providerId} {
        allow read: if request.auth != null;
    }
    match /masterComponents/{componentId} {
      // Allow signed-in users to read all master components.
      // Allow signed-in users to write (create, update, delete) to master components for admin functionality.
      allow read, write: if request.auth != null;
    }
     match /ignoredDuplicates/{key} {
      allow read, write: if request.auth != null;
    }
    match /trainingData/{docId} {
      allow write: if request.auth != null;
    }
    // Any authenticated user can create their own document in the 'serviceProviders' collection
    // and can only read/write their own document after it's created.
    match /serviceProviders/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /workOrders/{workOrderId} {
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.serviceProviderId || request.auth.uid == resource.data.userId);
    }

    match /employees/{employeeId} {
      // Allow read/list if the user's UID matches the shopId in the query.
      allow read, delete, update: if request.auth != null && request.auth.uid == resource.data.shopId;
      // Allow create if the user's UID matches the shopId in the new document.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.shopId;
    }
  }
}
