rules_version = '2';

// Helper functions to improve readability
function isOwner(userId) {
  return request.auth.uid == userId;
}

function isShopOwner() {
  // A user is a shop owner if they have a corresponding document in the serviceProviders collection
  return exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid));
}

function isAssociatedWithShop(shopId) {
    return request.auth.uid == shopId;
}

// Rules for the entire database
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own data.
    // Shops can also read customer data under certain conditions (defined in other rules).
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Public shop information can be read by any authenticated user (e.g., for discovery).
    // Only the shop owner can create or update their own provider document.
    match /serviceProviders/{shopId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAssociatedWithShop(shopId);
    }
    
    // Rules for the master list of components
    // Shops can read this list to add components.
    // In a real production app, this would likely be admin-only write access.
    match /masterComponents/{componentId} {
        allow read: if request.auth != null;
        // For now, allowing any authenticated user to write.
        // TODO: Lock this down to an admin role in the future.
        allow write: if request.auth != null;
    }

    // Rules for shop-specific data
    match /employees/{employeeId} {
      // Allow read/write if the employee document's shopId matches the logged-in user's UID.
      allow read, create, update, delete: if isShopOwner() && resource.data.shopId == request.auth.uid;
    }

    match /workOrders/{workOrderId} {
      // A customer can create a work order for themselves.
      allow create: if isOwner(request.resource.data.userId);

      // A customer can read their own work orders.
      // A shop owner can read work orders assigned to their shop.
      allow read: if isOwner(resource.data.userId) ||
                     (isShopOwner() && resource.data.serviceProviderId == request.auth.uid);

      // A shop can update the work order.
      // A customer can potentially update it (e.g., to cancel), which we can refine later.
      allow update: if isShopOwner() && resource.data.serviceProviderId == request.auth.uid;

      // Generally, deletion should be handled carefully.
      allow delete: if isOwner(resource.data.userId) || 
                       (isShopOwner() && resource.data.serviceProviderId == request.auth.uid);
    }

    // Nested collections within a user's document
    match /users/{userId}/equipment/{equipmentId} {
        // The user owns their equipment, so they have full access.
        allow read, write: if isOwner(userId);
        
        // A shop owner can read the equipment if they have an associated work order for that user.
        // This is a more complex rule. For now, we will allow any authenticated shop to read/write,
        // which resolves the immediate error but should be secured later.
        allow read, write: if isShopOwner();
        
        // Sub-collection for components
        match /components/{componentId} {
            allow read, write: if isOwner(userId);
            allow read, write: if isShopOwner(); // Same permissive rule as above.
        }
    }
  }
}
