rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || exists(/databases/$(database)/documents/serviceProviders/$(request.auth.uid)));
    }

    // Grant read and write access to equipment data only if the user ID matches the userId field in the equipment document.
    match /equipment/{equipmentId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Authenticated users can read the global data.
    match /bikeModels/{bikeId} {
      allow read: if request.auth != null;
    }
    match /serviceProviders/{providerId} {
        allow read: if request.auth != null;
    }
    match /masterComponents/{componentId} {
      // Allow signed-in users to read all master components.
      // Allow signed-in users to write (create, update, delete) to master components for admin functionality.
      allow read, write: if request.auth != null;
    }
     match /ignoredDuplicates/{key} {
      allow read, write: if request.auth != null;
    }
    match /trainingData/{docId} {
      allow write: if request.auth != null;
    }
    // Any authenticated user can create their own document in the 'serviceProviders' collection
    // and can only read/write their own document after it's created.
    match /serviceProviders/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /workOrders/{workOrderId} {
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.serviceProviderId || request.auth.uid == resource.data.userId);
    }

    match /employees/{employeeId} {
      // Allow read/list if the user's UID matches the shopId in the query.
      allow read, delete, update: if request.auth != null && request.auth.uid == resource.data.shopId;
      // Allow create if the user's UID matches the shopId in the new document.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.shopId;
    }
  }
}
